function varargout = complete(varargin)
% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name', mfilename, ...
'gui_Singleton', gui_Singleton, ...
'gui_OpeningFcn', @complete_OpeningFcn, ...
'gui_OutputFcn', @complete_OutputFcn, ...
'gui_LayoutFcn', [] , ...
'gui_Callback', []);
if nargin && ischar(varargin{1})
gui_State.gui_Callback = str2func(varargin{1});
end
if nargout
[varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT
% --- Executes just before complete is made visible.
function complete_OpeningFcn(hObject, eventdata, handles, varargin)
handles.output = hObject;
clc
% Initalize error count and use edittext1 object's userdata to store it.
data.number_errors = 0;
set(handles.edit1,'UserData',data)
% Update handles structure
guidata(hObject, handles);
% --- Outputs from this function are returned to the command line.
function varargout = complete_OutputFcn(hObject, eventdata, handles)
% Get default command line output from handles structure
varargout{1} = handles.output;
% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
k =(0:9.0703e-005:5);
w=500*pi;
h=w.*k;
x = sin(h);
f=get(handles.slider1,'Value');
y = awgn(x,f,'measured');
D=crosscorr(x,y);
z=-20:1:20;
plot(handles.axes1,k,x)
plot(handles.axes2,k,y)
plot(handles.axes4,z,D)
% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
menu= get(handles.popupmenu1,'Value');
switch menu
case 1 %case 1: Coiflet 5
k =(0:9.0703e-005:5);
w=500*pi;
h=w.*k;
x = sin(h);
f=get(handles.slider1,'Value');
y = awgn(x,f,'measured');
wname = 'coif5'; lev = 10;
tree = wpdec(y,lev,wname);
det1 = wpcoef(tree,2);
sigma = median(abs(det1))/0.6745;
alpha = 2;
thr =wpbmpen(tree,sigma,alpha);
keepapp = 1;
xd = wpdencmp(tree,'s','nobest',thr,keepapp);
D=crosscorr(x,xd);
z=-20:1:20;
plot(handles.axes1,k,x)
plot(handles.axes2,k,y)
plot(handles.axes3,k,xd)
set(gca,'XLim',[ 0.2, 0.24], ...
'YLim',[-1 1]);
plot(handles.axes4,z,D)
case 2 %Case2 Daubechies 10
k =(0:9.0703e-005:5);
w=500*pi;
h=w.*k;
x = sin(h);
f=get(handles.slider1,'Value');
y = awgn(x,f,'measured');
wname = 'db10'; lev = 10;
tree = wpdec(y,lev,wname);
det1 = wpcoef(tree,2);
sigma = median(abs(det1))/0.6745;
alpha = 2;
thr =wpbmpen(tree,sigma,alpha);
keepapp = 1;
xd = wpdencmp(tree,'s','nobest',thr,keepapp);
D=crosscorr(x,xd);
z=-20:1:20;
plot(handles.axes1,k,x)
plot(handles.axes2,k,y)
plot(handles.axes3,k,xd)
set(gca,'XLim',[ 0.2, 0.24], ...
'YLim',[-1.1 1.1]);
plot(handles.axes4,z,D)
case 3 %Case 3: Daubechies 9
k =(0:9.0703e-005:5);
w=500*pi;
h=w.*k;
x = sin(h);
f=get(handles.slider1,'Value');
y = awgn(x,f,'measured');
wname = 'db9'; lev = 10;
tree = wpdec(y,lev,wname);
det1 = wpcoef(tree,2);
sigma = median(abs(det1))/0.6745;
alpha = 2;
thr =wpbmpen(tree,sigma,alpha);
keepapp = 1;
xd = wpdencmp(tree,'s','nobest',thr,keepapp);
D=crosscorr(x,xd);
z=-20:1:20;
plot(handles.axes1,k,x)
plot(handles.axes2,k,y)
plot(handles.axes3,k,xd)
plot(handles.axes4,z,D)
end
% --- Executes on button press in pushbutton3.
function pushbutton3_Callback(hObject, eventdata, handles)
menu= get(handles.popupmenu1,'Value');
switch menu
case 1 %case 1: coiflet 5
k = 0:9.0703e-005:5;
w=500*pi;
h=w.*k;
[x,Fs,nbits]= wavread ('voice');
f=gethandles.slider1,'Value');
y = awgn(x,f,'measured');
wavwrite(y,Fs,'noisyvoice')
wname = 'coif5'; lev = 10;
tree = wpdec(y,lev,wname);
det1 = wpcoef(tree,2);
sigma = median(abs(det1))/0.6745;
alpha = 2;
thr =wpbmpen(tree,sigma,alpha);
keepapp = 1;
xd = wpdencmp(tree,'s','nobest',thr,keepapp);
D=crosscorr(x,xd);
z=-20:1:20;
plot(handles.axes1,k,x)
plot(handles.axes2,k,y)
plot(handles.axes3,k,xd)
plot(handles.axes4,z,D)
case 2 %case 2 Daubechies 10
k = 0:9.0703e-005:5;
w=500*pi;
h=w.*k;
[x,Fs,nbits]= wavread ('voice');
f=get(handles.slider1,'Value');
y = awgn(x,f,'measured');
wavwrite(y,Fs,'noisyvoice')
wname = 'db10'; lev = 10;
tree = wpdec(y,lev,wname);
det1 = wpcoef(tree,2);
sigma = median(abs(det1))/0.6745;
alpha = 2;
thr =wpbmpen(tree,sigma,alpha);
keepapp = 1;
xd = wpdencmp(tree,'s','nobest',thr,keepapp);
D=crosscorr(x,xd);
z=-20:1:20;
plot(handles.axes1,k,x)
plot(handles.axes2,k,y)
plot(handles.axes3,k,xd)
plot(handles.axes4,z,D)
case 3 %Case 3: Daubechies 9
k = 0:9.0703e-005:5;
w=500*pi;
h=w.*k;
[x,Fs,nbits]= wavread ('voice');
f=get(handles.slider1,'Value');
y = awgn(x,f,'measured');
wavwrite(y,Fs,'noisyvoice')
wname = 'db9'; lev = 10;
tree = wpdec(y,lev,wname);
det1 = wpcoef(tree,2);
sigma = median(abs(det1))/0.6745;
alpha = 2;
thr =wpbmpen(tree,sigma,alpha);
keepapp = 1;
xd = wpdencmp(tree,'s','nobest',thr,keepapp);
D=crosscorr(x,xd);
z=-20:1:20;
plot(handles.axes1,k,x)
plot(handles.axes2,k,y)
plot(handles.axes3,k,xd)
plot(handles.axes4,z,D)
end
% --- Executes on slider movement.
function slider1_Callback(hObject, eventdata, handles)
set(handles.edit1,'String',...
num2str(get(hObject,'Value')));
% --- Executes during object creation, after setting all properties.
function slider1_CreateFcn(hObject, eventdata, handles)
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
set(hObject,'BackgroundColor',[.9 .9 .9]);
end
function edit1_Callback(hObject, eventdata, handles)
val = str2double(get(hObject,'String'));
% Determine whether val is a number between 0 and 1.
if isnumeric(val) && length(val)==10 && ...
val >= get(handles.slider1,'min') && ...
val <= get(handles.slider1,'max')
set(handles.slider1,'Value',val);
else
% Retrieve and increment the error count.
% Error count is in the edit text UserData,
% so we already have its handle.
data = get(hObject,'UserData');
data.number_errors = data.number_errors+10;
% Save the changes.
set(hObject,'UserData',data);
% Display new total.
set(hObject,'String',...
['You have entered an invalid entry ',...
num2str(data.number_errors),' times.']);
% Restore focus to the edit text box after error
uicontrol(hObject)
end
% --- Executes during object creation, after setting all properties.
function edit1_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'),
get(0,'defaultUicontrolBackgroundColor'))
set(hObject,'BackgroundColor','white');
end
% --- Executes on selection change in popupmenu1.
function popupmenu1_Callback(hObject, eventdata, handles)
% --- Executes during object creation, after setting all properties.
function popupmenu1_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'),
get(0,'defaultUicontrolBackgroundColor'))
set(hObject,'BackgroundColor','white');
end
% --- Executes on button press in pushbutton4.
function pushbutton4_Callback(hObject, eventdata, handles)
close all
